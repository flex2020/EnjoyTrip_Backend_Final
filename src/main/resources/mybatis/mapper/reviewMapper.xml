<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.review.model.ReviewMapper">
	<insert id="writeReview" parameterType="reviewDto">
		insert into reviews (match_id, member_id, review_title, scope, content, hit, register_time, deleted, like_count)
		values (#{matchId}, 1, #{reviewTitle}, #{scope}, #{content}, #{hit}, now(), #{deleted}, #{likeCount})
	</insert>
	
	<sql id="search">
		<if test="word != null and word != ''">
			<if test="key == 'subject'">
				and review_title, content like concat('%', #{word}, '%') 
			</if>
			<if test="key != 'subject'">
				and ${key} = #{word}
			</if>
		</if>
	</sql>
	
	<select id="listReview" resultType="reviewDto">
		select review_id, match_id, member_id, review_title, scope, content, hit, register_time, deleted, like_count from reviews
		where 1=1
		<choose>
			<when test="scopeKey == 1">
	            and scope = 1
	        </when>
	        <when test="scopeKey == 2">
	            and scope = 2
	        </when>
		</choose>
		<choose>
			<when test="keyword != ''">
	            and review_title like concat('%', #{keyword}, '%')
	        </when>
		</choose>
		<choose>
	        <when test="sortKey == 0">
	            ORDER BY review_id DESC
	        </when>
	        <when test="sortKey == 1">
	            ORDER BY like_count DESC
	        </when>
	        <when test="sortKey == 2">
	            ORDER BY hit DESC
	        </when>
	        <otherwise>
	            ORDER BY review_id DESC
	        </otherwise>
	    </choose>
		limit #{start}, #{listsize}
	</select>
	
	<select id="getTotalReviewCount" parameterType="map" resultType="int">
		select count(review_id)
		from reviews
	</select>
	
	<update id="updateHit" parameterType="int">
		update reviews
		set hit = hit + 1
		where review_id = #{reviewId}
	</update>
	
	<select id="getReviewView" parameterType="int" resultType="reviewViewDto">	
		SELECT 
			r.review_id AS reviewId,
    		r.match_id AS matchId,
    		r.member_id AS memberId,
    		r.review_title AS reviewTitle,
    		r.scope AS scope,
    		r.content AS content,
    		r.hit AS hit,
    		r.register_time AS registerTime,
    		r.deleted AS deleted,
    		r.like_count AS likeCount,
    		m.member_name AS memberName,
    		DATE_FORMAT(mt.travel_start_date, '%Y-%m-%d') AS travelStartDate,
    		DATE_FORMAT(mt.travel_end_date, '%Y-%m-%d') AS travelEndDate
		FROM 
		    reviews r
		INNER JOIN 
		    members m ON r.member_id = m.member_id
		INNER JOIN 
		    matches mt ON r.match_id = mt.match_id
		where r.member_id = m.member_id
				and r.review_id = #{viewId}
	</select>
	
	<select id="getReviewUpdate" parameterType="int" resultType="reviewDto">	
		SELECT 
			r.review_id AS reviewId,
    		r.match_id AS matchId,
    		r.member_id AS memberId,
    		r.review_title AS reviewTitle,
    		r.scope AS scope,
    		r.content AS content,
    		r.hit AS hit,
    		r.register_time AS registerTime,
    		r.deleted AS deleted,
    		r.like_count AS likeCount
		FROM 
		    reviews r
		where r.review_id = #{viewId}
	</select>
	
	<update id="updateReview" parameterType="reviewDto">
		update reviews
		set review_title = #{reviewTitle}, content = #{content}, scope = #{scope}
		where review_id = #{reviewId}
	</update>
	
	<delete id="deleteReview" parameterType="int">
		delete from reviews
		where review_id = #{reviewId}
	</delete>
</mapper>