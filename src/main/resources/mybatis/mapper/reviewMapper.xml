<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.enjoytrip.review.model.ReviewMapper">
	<insert id="writeReview" parameterType="reviewDto" useGeneratedKeys="true" keyProperty="reviewId">
		insert into reviews (match_id, member_id, review_title, scope, content, preview_content, hit, register_time, deleted, like_count, first_image)
		values (#{matchId}, #{memberId}, #{reviewTitle}, #{scope}, #{content}, #{previewContent}, #{hit}, now(), #{deleted}, #{likeCount}, #{firstImage})
	</insert>
	
	<insert id="mappingFiles" parameterType="reviewFileDto">
		insert 
			into review_files (review_id, file_id)
			values
			<foreach collection="list" item="item" index="idx" separator=",">
                 ( 
                       #{item.reviewId}
                     , #{item.fileId}
                 )
            </foreach>
	</insert>
	
	<sql id="search">
		<if test="word != null and word != ''">
			<if test="key == 'subject'">
				and review_title, content like concat('%', #{word}, '%') 
			</if>
			<if test="key != 'subject'">
				and ${key} = #{word}
			</if>
		</if>
	</sql>
	
	<select id="listReview" resultType="reviewDto">
		select review_id, match_id, member_id, review_title, scope, content, preview_content, hit, register_time, deleted, like_count, first_image
			from reviews
			where 1=1
			<choose>
				<when test="scopeKey == 1">
		            and scope = 1
		        </when>
		        <when test="scopeKey == 2">
		            and scope = 2
		        </when>
			</choose>
			<choose>
				<when test="keyword != ''">
		            and review_title like concat('%', #{keyword}, '%')
		        </when>
			</choose>
			<choose>
		        <when test="sortKey == 0">
		            ORDER BY review_id DESC
		        </when>
		        <when test="sortKey == 1">
		            ORDER BY like_count DESC
		        </when>
		        <when test="sortKey == 2">
		            ORDER BY hit DESC
		        </when>
		        <otherwise>
		            ORDER BY review_id DESC
		        </otherwise>
		    </choose>
			limit #{start}, #{listsize}
	</select>
	
	<select id="getTotalReviewCount" parameterType="map" resultType="int">
		select count(review_id)
		from reviews
	</select>
	
	<update id="updateHit" parameterType="int">
		update reviews
		set hit = hit + 1
		where review_id = #{reviewId}
	</update>
	
	<select id="getReviewView" parameterType="int" resultType="reviewViewDto">	
		SELECT 
			r.review_id AS reviewId,
    		r.match_id AS matchId,
    		r.member_id AS memberId,
    		r.review_title AS reviewTitle,
    		r.scope AS scope,
    		r.content AS content,
    		r.hit AS hit,
    		r.register_time AS registerTime,
    		r.deleted AS deleted,
    		r.like_count AS likeCount,
    		m.nickname AS nickName,
    		DATE_FORMAT(mt.travel_start_date, '%Y-%m-%d') AS travelStartDate,
    		DATE_FORMAT(mt.travel_end_date, '%Y-%m-%d') AS travelEndDate,
    		count(mm.match_id) as memberCount
		FROM 
		    reviews r
		INNER JOIN 
		    members m ON r.member_id = m.member_id
		INNER JOIN 
		    matches mt ON r.match_id = mt.match_id
		join
			match_members mm on r.match_id = mm.match_id 
		where r.member_id = m.member_id
				and r.review_id = #{viewId}
	</select>
	
	<select id="getReviewUpdate" parameterType="int" resultType="reviewDto">	
		SELECT 
			r.review_id AS reviewId,
    		r.match_id AS matchId,
    		r.member_id AS memberId,
    		r.review_title AS reviewTitle,
    		r.scope AS scope,
    		r.content AS content,
    		r.hit AS hit,
    		r.register_time AS registerTime,
    		r.deleted AS deleted,
    		r.like_count AS likeCount
		FROM 
		    reviews r
		where r.review_id = #{viewId}
	</select>
	
	<update id="updateReview" parameterType="reviewDto">
		update reviews
			set review_title = #{reviewTitle}, content = #{content}, scope = #{scope}, preview_content = #{previewContent}, first_image = #{firstImage}
			where review_id = #{reviewId}
	</update>
	
	<update id="deleteReview" parameterType="int">
		update reviews
			set deleted = 1
			where review_id = #{reviewId} 
	</update>
	
	<insert id="insertLikeCount" parameterType="reviewMemberLikesDto">
		insert into review_member_likes (review_id, member_id)
		values (#{reviewId}, #{memberId})
	</insert>
	
	<select  id="selectLikeCount" parameterType="reviewMemberLikesDto" resultType="reviewMemberLikesDto">
		select * from review_member_likes where review_id = #{reviewId} and member_id = #{memberId}
	</select>
	
	<update id="updateLikeCount" parameterType="map">
		update reviews
		<choose>
			<when test="order == 'up'">
				set like_count = like_count + 1
			</when>
			<when test="order == 'down'">
				set like_count = like_count - 1
			</when>	
		</choose>
		where review_id = #{viewId}
	</update>
	
	<delete id="deleteLikeCount" parameterType="reviewMemberLikesDto">
		delete from review_member_likes
		where review_id = #{reviewId}
	</delete>
	
	<!-- 팔로잉 관계를 확인하는 쿼리 -->
    <select id="getRelation" parameterType="map" resultType="int">
        SELECT COUNT(*) > 0
        FROM followings
        WHERE (from_member_id = #{loginUserId} AND to_member_id = #{targetUserId})
           OR (from_member_id = #{targetUserId} AND to_member_id = #{loginUserId})
    </select>
	
	<select id="getRecentlyReview" parameterType="map" resultType="reviewDto">
		select * from reviews
		where member_id = #{targetUserId}
		<choose>
			<when test="isRelation == 0">
				and scope = 0
			</when>
			<when test="isRelation == 1">
				and scope &lt; 2
			</when>
			<when test="isRelation == 2">
				and scope &lt; 3
			</when>
		</choose>
		order by review_id DESC
	</select>
	
	<select id="getFollowReview" parameterType="map" resultType="reviewDto">
		SELECT 
		    r.review_id,
		    r.match_id,
		    r.member_id,
		    r.review_title,
		    r.scope,
		    r.content,
		    r.hit,
		    r.register_time,
		    r.deleted,
		    r.like_count
		FROM 
	        reviews r
	    WHERE 
	        r.member_id = #{targetUserId}
	        <choose>
				<when test="isRelation == 0">
					and scope = 0
				</when>
				<when test="isRelation == 1">
					and scope &lt; 2
				</when>
				<when test="isRelation == 2">
					and scope &lt; 3
				</when>
			</choose>
	</select>
	
	<!-- 댓글 -->
	<select id="commentList" parameterType="int" resultType="commentDto">
		select c.comment_id, c.review_id, c.member_id, c.content, c.comment_group, c.depth, c.register_time, c.deleted, c.reply_parent_name, m.nickname
			from review_comments c join members m on c.member_id = m.member_id
			where review_id = #{reviewId}
	</select>
	
	<!-- 추가된 쿼리: comment_id로 member_name 조회 -->
    <select id="getReplyParentName" parameterType="string" resultType="string">
        select m.nickname
        from review_comments c
        join members m on c.member_id = m.member_id
        where c.comment_id = #{commentId}
    </select>
	
	<insert id="writeComment" parameterType="commentDto" useGeneratedKeys="true" keyProperty="commentId">
		insert into review_comments (review_id, member_id, content, depth)
			values (#{reviewId}, #{memberId}, #{content}, #{depth})
	</insert>
	
	<update id="setCommentGroup" parameterType="String">
		update review_comments
			set comment_group = #{commentId}
			where comment_id = #{commentId}
	</update>
	
	<insert id="writeReply" parameterType="commentDto">
		insert into review_comments (review_id, member_id, content, depth, comment_group, reply_parent_name)
			values (#{reviewId}, #{memberId}, #{content}, #{depth}, #{commentGroup}, #{replyParentName})
	</insert>
	
	<update id="updateComment" parameterType="commentDto">
		update review_comments
			set content = #{content}
			where comment_id = #{commentId}
	</update>
	
	<update id="deleteComment" parameterType="int">
		update review_comments
			set deleted = 1
			where comment_id = #{commentId} 
	</update>
</mapper>